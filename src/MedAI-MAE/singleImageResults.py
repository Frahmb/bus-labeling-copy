# -*- coding: utf-8 -*-
"""MAETesting481

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1abGWv9IA_jHPO0Q7rrJcRY1NcZqd6Jpn
"""

!pip install timm
!pip install torch torchvision

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import sys
sys.path.append('/content/drive/My Drive/CS481')

import argparse
import torch
import models_vit
import misc
import numpy as np
import os
from datasets import build_dataset
from PIL import Image
from torchvision import transforms
from engine_fineTEST import evaluate
from pos_embed import interpolate_pos_embed


def get_args_parser():
    parser = argparse.ArgumentParser('MAE fine-tuning for image classification', add_help=False)
    parser.add_argument('--batch_size', default=64, type=int,
                        help='Batch size per GPU (effective batch size is batch_size * accum_iter * # gpus')
    parser.add_argument('--epochs', default=50, type=int)
    parser.add_argument('--accum_iter', default=1, type=int,
                        help='Accumulate gradient iterations (for increasing the effective batch size under memory constraints)')

    # Model parameters
    parser.add_argument('--model', default='vit_large_patch16', type=str, metavar='MODEL',
                        help='Name of model to train')

    parser.add_argument('--input_size', default=224, type=int,
                        help='images input size')

    parser.add_argument('--drop_path', type=float, default=0.1, metavar='PCT',
                        help='Drop path rate (default: 0.1)')

    # Optimizer parameters
    parser.add_argument('--clip_grad', type=float, default=None, metavar='NORM',
                        help='Clip gradient norm (default: None, no clipping)')
    parser.add_argument('--weight_decay', type=float, default=0.05,
                        help='weight decay (default: 0.05)')

    parser.add_argument('--lr', type=float, default=None, metavar='LR',
                        help='learning rate (absolute lr)')
    parser.add_argument('--blr', type=float, default=1e-3, metavar='LR',
                        help='base learning rate: absolute_lr = base_lr * total_batch_size / 256')
    parser.add_argument('--layer_decay', type=float, default=0.75,
                        help='layer-wise lr decay from ELECTRA/BEiT')

    parser.add_argument('--min_lr', type=float, default=1e-6, metavar='LR',
                        help='lower lr bound for cyclic schedulers that hit 0')

    parser.add_argument('--warmup_epochs', type=int, default=5, metavar='N',
                        help='epochs to warmup LR')

    # Augmentation parameters
    parser.add_argument('--color_jitter', type=float, default=None, metavar='PCT',
                        help='Color jitter factor (enabled only when not using Auto/RandAug)')
    parser.add_argument('--aa', type=str, default='rand-m9-mstd0.5-inc1', metavar='NAME',
                        help='Use AutoAugment policy. "v0" or "original". " + "(default: rand-m9-mstd0.5-inc1)'),
    parser.add_argument('--smoothing', type=float, default=0.1,
                        help='Label smoothing (default: 0.1)')

    # * Random Erase params
    parser.add_argument('--reprob', type=float, default=0.25, metavar='PCT',
                        help='Random erase prob (default: 0.25)')
    parser.add_argument('--remode', type=str, default='pixel',
                        help='Random erase mode (default: "pixel")')
    parser.add_argument('--recount', type=int, default=1,
                        help='Random erase count (default: 1)')
    parser.add_argument('--resplit', action='store_true', default=False,
                        help='Do not random erase first (clean) augmentation split')

    # * Mixup params
    parser.add_argument('--mixup', type=float, default=0,
                        help='mixup alpha, mixup enabled if > 0.')
    parser.add_argument('--cutmix', type=float, default=0,
                        help='cutmix alpha, cutmix enabled if > 0.')
    parser.add_argument('--cutmix_minmax', type=float, nargs='+', default=None,
                        help='cutmix min/max ratio, overrides alpha and enables cutmix if set (default: None)')
    parser.add_argument('--mixup_prob', type=float, default=1.0,
                        help='Probability of performing mixup or cutmix when either/both is enabled')
    parser.add_argument('--mixup_switch_prob', type=float, default=0.5,
                        help='Probability of switching to cutmix when both mixup and cutmix enabled')
    parser.add_argument('--mixup_mode', type=str, default='batch',
                        help='How to apply mixup/cutmix params. Per "batch", "pair", or "elem"')

    # * Finetuning params
    parser.add_argument('--finetune', default='',
                        help='finetune from checkpoint')
    parser.add_argument('--global_pool', action='store_true')
    parser.set_defaults(global_pool=True)
    parser.add_argument('--cls_token', action='store_false', dest='global_pool',
                        help='Use class token instead of global pool for classification')

    # Dataset parameters
    parser.add_argument('--data_path', default='/datasets01/imagenet_full_size/061417/', type=str,
                        help='dataset path')
    parser.add_argument('--nb_classes', default=1000, type=int,
                        help='number of the classification types')

    parser.add_argument('--output_dir', default='./output_dir',
                        help='path where to save, empty for no saving')
    parser.add_argument('--log_dir', default='./output_dir',
                        help='path where to tensorboard log')
    parser.add_argument('--device', default='cuda',
                        help='device to use for training / testing')
    parser.add_argument('--seed', default=0, type=int)
    parser.add_argument('--resume', default='',
                        help='resume from checkpoint')

    parser.add_argument('--start_epoch', default=0, type=int, metavar='N',
                        help='start epoch')
    parser.add_argument('--eval', action='store_true',
                        help='Perform evaluation only')
    parser.add_argument('--dist_eval', action='store_true', default=False,
                        help='Enabling distributed evaluation (recommended during training for faster monitor')
    parser.add_argument('--num_workers', default=10, type=int)
    parser.add_argument('--pin_mem', action='store_true',
                        help='Pin CPU memory in DataLoader for more efficient (sometimes) transfer to GPU.')
    parser.add_argument('--no_pin_mem', action='store_false', dest='pin_mem')
    parser.set_defaults(pin_mem=True)

    # distributed training parameters
    parser.add_argument('--world_size', default=1, type=int,
                        help='number of distributed processes')
    parser.add_argument('--local_rank', default=-1, type=int)
    parser.add_argument('--dist_on_itp', action='store_true')
    parser.add_argument('--dist_url', default='env://',
                        help='url used to set up distributed training')

    return parser

def evaluate_single_image(image_tensor, model, device):
    # Ensure the model is in evaluation mode
    model.eval()
    
    # Move the image tensor to the correct device
    #image_tensor = image_tensor.to(device)
    
    # Compute the model's output
    with torch.no_grad():
        output = model(image_tensor)
    
    # Get the predicted class label
    _, predicted_label = torch.max(output, 1)
    
    return predicted_label.item()


def main(args):

  image_path = "/content/drive/MyDrive/CS481/val/class_test/case1.png"
  image = Image.open(image_path)

  preprocess = transforms.Compose([
    transforms.Resize((224, 224)), # Resize to the expected input size
    transforms.ToTensor(), # Convert to tensor
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]), # Normalize,
  ])


  image_tensor = preprocess(image)

  image_tensor = image_tensor.unsqueeze(0)


  print("IMAGE SHAPPE RAHHHH!!!", image_tensor.shape) # Should print something like torch.Size([3, 224, 224])

  #image_tensor = image_tensor.view(-1, 3, 224, 224)  # Reshape to match original image dimensions

  data_loader_single = torch.utils.data.DataLoader(
    torch.utils.data.TensorDataset(image_tensor),
    batch_size=1,
    shuffle=False,
    num_workers=0,
    pin_memory=args.pin_mem,
    drop_last=False
)

  '''
    # Add a batch dimension
 
  '''
  # Convert the image to a NumPy array
  image_np = np.array(image)

  # Convert the NumPy array to a PyTorch tensor
  x = torch.from_numpy(image_np)



  dataset_train = build_dataset(is_train=True, args=args)
  dataset_val = build_dataset(is_train=False, args=args)
  device = torch.device("cpu")
  #device = torch.device(args.device)

  if True:  # args.distributed:
        num_tasks = misc.get_world_size()
        global_rank = misc.get_rank()
        sampler_train = torch.utils.data.DistributedSampler(
            dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True
        )
        if args.dist_eval:
            if len(dataset_val) % num_tasks != 0:
                print('Warning: Enabling distributed evaluation with an eval dataset not divisible by process number. '
                      'This will slightly alter validation results as extra duplicate entries are added to achieve '
                      'equal num of samples per-process.')
            sampler_val = torch.utils.data.DistributedSampler(
                dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=True)  # shuffle=True to reduce monitor bias
        else:
                 sampler_val = torch.utils.data.SequentialSampler(dataset_val)
  else:
        sampler_train = torch.utils.data.RandomSampler(dataset_train)
        sampler_val = torch.utils.data.SequentialSampler(dataset_val)

  model = models_vit.__dict__[args.model](
        num_classes=args.nb_classes,
        drop_path_rate=args.drop_path,
        global_pool=args.global_pool,
    )

  print("got here")
  # Load the model checkpoint
  checkpoint_path = "/content/drive/MyDrive/CS481/mae_BUS_checkpoint.pth"

  checkpoint = torch.load(checkpoint_path, map_location = 'cpu')
  checkpoint_model = checkpoint['model']
  state_dict = model.state_dict()

  model.to(device)

  model_without_ddp = model

  '''
    # build optimizer with layer-wise lr decay (lrd)
  param_groups = lrd.param_groups_lrd(model_without_ddp, args.weight_decay,
  no_weight_decay_list=model_without_ddp.no_weight_decay(),
  layer_decay=args.layer_decay
    )

  optimizer = torch.optim.AdamW(param_groups, lr=0.25)
  loss_scaler = NativeScaler()

    # loss function: cross entropy
  criterion = torch.nn.CrossEntropyLoss()
  #model_without_ddp.load_state_dict(checkpoint['model'])

  misc.load_model(args=args, model_without_ddp=model_without_ddp, optimizer=optimizer, loss_scaler=loss_scaler)
  '''
  if args.eval:
    test_stats = evaluate_single_image(image_tensor, model, device)
    print(f"Accuracy of the network on the {len(dataset_val)} test images: {test_stats['acc1']:.1f}%")
    exit(0)


  print("got here")

args_parser = get_args_parser()

# Step 2: Parse the default arguments
args = args_parser.parse_args(['--data_path=/content/drive/MyDrive/CS481', '--eval',
]) # Pass an empty list to use default values


# Call the main function with the defined arguments
main(args)